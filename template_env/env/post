#!/bin/bash
# inverse order of channels:
conda config --env --add channels conda-forge
conda config --env --add channels defaults
conda config --env --add channels pytorch

pip install wpca factor_analyzer || exi
pip install git+"https://github.com/matangover/mypyls/archive/master.zip#egg=mypyls[default-mypy]" || exi
pip install --user git+"https://github.com/numpy/numpy-stubs" || exi

kernel="$env"
python -m ipykernel install --user --name "$kernel" || exi

exec=python
execdir="$(dirname "$(type -p "$exec")")"
if [[ "$OSTYPE" == "msys" ]]; then
    # works for <env>/exec
    env="$execdir"
    wrap="$execdir/Scripts/wrap/$exec"
else
    # works for <env>/bin/exec
    env="$(dirname "$execdir")"
    wrap="$execdir/wrap/$exec"; fi

create-wrappers -t conda -b "$execdir" -f "$exec" -d "$(dirname "$wrap")" --conda-env-dir "$env"

if [[ "$OSTYPE" == "msys" ]]; then
    pref="$(cygpath "$APPDATA")/jupyter"
    wrap="$(cygpath -w "$wrap").bat"
elif [[ "$OSTYPE" =~ ^darwin ]]; then
    pref="$HOME/Library/Jupyter"
else
    pref="$HOME/.local/share/jupyter"; fi
export wrap="$wrap"
export kernelpath="$pref/kernels/$kernel/kernel.json"

cat "$kernelpath" | python -c "import json; import sys; import os; \
f = open(os.environ['kernelpath'], 'w'); dic = json.loads(sys.stdin.read()); \
dic['argv'][0] = os.environ['wrap'].replace(chr(92), '/'); \
json.dump(dic, f); f.close()"


exec=mypy
execdir="$(dirname "$(type -p "$exec")")"
create-wrappers -t conda -b "$execdir" -f "$exec" -d "$(dirname "$execdir/wrap/$exec")" --conda-env-dir "$(dirname "$execdir")"


exec=mypyls
execdir="$(dirname "$(type -p "$exec")")"
create-wrappers -t conda -b "$execdir" -f "$exec" -d "$(dirname "$execdir/wrap/$exec")" --conda-env-dir "$(dirname "$execdir")"
